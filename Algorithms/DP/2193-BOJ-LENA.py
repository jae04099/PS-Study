# 접근법
# 1. 0으로 시작하지 않음
# 2. 1이 두 번 연속으로 나타나지 않음.
# 맨 마지막 숫자가 1이면 -1번째는 1이 올 수 없다.
# 맨 마지막 숫자가 0이면 -1에는 1이 올 수 있지만 -2에는 올 수 없다.
# 앞 두 자리는 꼭 1, 0으로 시작해야 함

# 자릿수 | 경우의 수
# 1 | 1 | 1
# 2 | 1 | 10
# 3 | 2 | 101, 100
# 4 | 3 | 1001, 1010, 1000
# 5 | 5 | 10010, 10100, 10000, 10101, 10001
# 뒤에서부터 순서대로 0일떄, 1일때 갯수를 더하면 되지 않을까?

# n = int(input())
# dp = [[0] * 2 for _ in range(n)]
# dp[1][0] = 0
# dp[1][1] = 1
# for i in range(2, n + 1):


#--------------------------------------------------------
# 앞 10을 빼고 뒷자리만 보면 4의 01은 3의 1빼고 01, 00과 2의 10이 모여 만들어진다.
# 이를 통해 점화식은 두 단계 앞의 갯수 + 한 단계 앞의 갯수가 됨.

lists = [0, 1, 1]
for i in range(3, 91):
    lists.append(lists[i - 2] + lists[i - 1])
n = int(input())
print(lists[n])
